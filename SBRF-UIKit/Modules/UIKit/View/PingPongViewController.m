//
//  PingPongViewController.m
//  SBRF-UIKit
//
//  Created Artem Balashov on 29/03/2019.
//  Copyright © 2019 pockerhead. All rights reserved.
//
//  Template generated by Balashov Artem @pockerhead
//

#import "PingPongViewController.h"
#import <UIKit/UIKit.h>


@interface PingPongViewController () <PingPongView>

@property (strong, nonatomic) UIView *ball;
@property (strong, nonatomic) UIView *topRocket;
@property (strong, nonatomic) UIView *bottomRocket;
@property (strong, nonatomic) UIView *gameMenuView;
@property (strong, nonatomic) UIView *menuOverlay;
@property (strong, nonatomic) UIView *settingsOverlay;
@property (assign, nonatomic) CGFloat ballDx;
@property (assign, nonatomic) CGFloat ballDy;
@property (assign, nonatomic) BOOL waitToPlayerInput;
@property (assign, nonatomic) NSTimer *gameTimer;
@property (assign, nonatomic) NSInteger bottomWins;
@property (assign, nonatomic) NSInteger topWins;
@property (assign, nonatomic) NSTimeInterval timerInterval;
@property (assign, nonatomic) BOOL isTopComputer;
@property (assign, nonatomic) BOOL isBottomComputer;

@end


@implementation PingPongViewController

static CGFloat const rocketsHeight = 30;
static CGFloat const buttonsHeight = 30;

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self configureUI];
    [self.presenter viewDidLoad];
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [self.presenter viewWillAppear];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [self pauseGame];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [self.presenter viewDidAppear];
}

// MARK: - Actions

- (void)didSelectStartGameButton
{
    [self.presenter didSelectStartGame];
    [self startGame];
}

- (void)didSelectSettingsButton
{
    [self.presenter didSelectSettings];
}

- (void)didSelectMenuButton
{
    [self.presenter didSelectMenuButton];
}

- (void)speedSliderValueChanged: (UISlider *)sender
{
    self.ballDx = sender.value * 2.5;
    self.ballDy = sender.value * 3.7;
}

- (void)topSwitchValueChanged:(UISwitch *)sender
{
    self.isTopComputer = sender.isOn;
}

- (void)bottomSwitchValueChanged:(UISwitch *)sender
{
    self.isBottomComputer = sender.isOn;
}

// MARK: - PingPongView

- (void)startGame
{
    self.navigationItem.title = [NSString stringWithFormat:@"%ld : %ld", (long)self.topWins, (long)self.bottomWins];
    [self placeViewsAtGameStart];
    self.waitToPlayerInput = YES;
    [self continueGame];
}

- (void)continueGame
{
    self.gameTimer = [NSTimer scheduledTimerWithTimeInterval:self.timerInterval target:self selector:@selector(runLoop) userInfo:nil repeats:YES];
}

- (void)pauseGame
{
    [self.gameTimer invalidate];
    self.gameTimer = nil;
}

- (void)playerWin:(BOOL)isTop
{
    if (isTop)
    {
        self.topWins += 1;
    }
    else
    {
        self.bottomWins += 1;
    }
    [self pauseGame];
    [self startGame];
}

- (void)placeViewsAtGameStart
{
    self.topRocket.frame = CGRectMake(0, self.view.safeAreaInsets.top, CGRectGetWidth(self.view.frame) / 3, rocketsHeight);
    self.bottomRocket.frame = CGRectMake(0, CGRectGetHeight(self.view.frame) - self.view.safeAreaInsets.bottom - rocketsHeight, CGRectGetWidth(self.view.frame) / 3, rocketsHeight);
    self.ball.center = self.view.center;
    self.topRocket.center = CGPointMake(self.view.center.x, self.topRocket.center.y);
    self.bottomRocket.center = CGPointMake(self.view.center.x, self.bottomRocket.center.y);
}

- (void)displayMenu
{
    [self.gameMenuView setHidden:NO];
    [UIView animateWithDuration:0.4 animations:^{
        self.gameMenuView.alpha = 1;
    }];
}

- (void)hideMenu
{
    [UIView animateWithDuration:0.2 animations:^{
        self.gameMenuView.alpha = 0;
    } completion:^(BOOL finished) {
        [self.gameMenuView setHidden:YES];
    }];}

- (void)displayGameOverlay
{
    [self.menuOverlay setHidden:NO];
    [UIView animateWithDuration:0.4 animations:^{
        self.menuOverlay.alpha = 1;
    }];
}

- (void)hideGameOverlay
{
    [UIView animateWithDuration:0.2 animations:^{
        self.menuOverlay.alpha = 0;
    } completion:^(BOOL finished) {
        [self.menuOverlay setHidden:YES];
    }];
}

- (void)displaySettings
{
    [self.settingsOverlay setHidden:NO];
    [UIView animateWithDuration:0.4 animations:^{
        self.settingsOverlay.alpha = 1;
    }];
}

- (void)hideSettings
{
    [UIView animateWithDuration:0.2 animations:^{
        self.settingsOverlay.alpha = 0;
    } completion:^(BOOL finished) {
        [self.settingsOverlay setHidden:YES];
    }];
}

- (void)prepareGameStart {
    
}


// MARK: - Touches Handle

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    self.waitToPlayerInput = NO;
    [self chooesPlayerFrom:touches];
}

- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    [self chooesPlayerFrom:touches];
}

- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    
}

- (void)chooesPlayerFrom: (NSSet <UITouch *>*)touches
{
    UITouch *touch1;
    UITouch *touch2;
    
    CGFloat centerYOfField = CGRectGetHeight(self.view.frame) / 2 - self.view.safeAreaInsets.bottom + self.view.safeAreaInsets.top;
    
    for (UITouch *touch in [touches allObjects])
    {
        if ([touch locationInView:self.view].y < centerYOfField)
        {
            touch2 = touch;
        }
        else
        {
            touch1 = touch;
        }
    }
    
    if (touch1)
    {
        self.bottomRocket.center = CGPointMake([touch1 locationInView:self.view].x, self.bottomRocket.center.y);
    }
    if (touch2)
    {
        self.topRocket.center = CGPointMake([touch2 locationInView:self.view].x, self.topRocket.center.y);
    }
}

// MARK: - RunLoop

- (void)runLoop
{
    if (self.waitToPlayerInput)
    {
        return;
    }
    [self detectBallAndViewBoundsCollision];
    [self detectBallAndRocketsCollision];
    self.ball.center = CGPointMake(self.ball.center.x + self.ballDx, self.ball.center.y + self.ballDy);
    
    if (self.isTopComputer)
    {
        self.topRocket.center = CGPointMake(self.ball.center.x, self.topRocket.center.y);
    }
    
    if (self.isBottomComputer)
    {
        self.bottomRocket.center = CGPointMake(self.ball.center.x, self.bottomRocket.center.y);
    }
    
}

// MARK: - Collision detector

- (void)detectBallAndViewBoundsCollision
{
    if (CGRectGetMaxX(self.ball.frame) >= CGRectGetWidth(self.view.frame) || CGRectGetMinX(self.ball.frame) <= CGRectGetMinX(self.view.frame))
    {
        self.ballDx *= -1;
    }
    
    if (CGRectGetMaxY(self.ball.frame) >= CGRectGetHeight(self.view.frame) - self.view.safeAreaInsets.bottom || CGRectGetMinY(self.ball.frame) <= self.view.safeAreaInsets.top)
    {
        BOOL isTop = (self.ballDy > 0);
        [self playerWin: isTop];
    }
}

- (void)detectBallAndRocketsCollision
{
    if (CGRectGetMinY(self.ball.frame) <= CGRectGetMaxY(self.topRocket.frame) && (CGRectGetMaxX(self.ball.frame) >= CGRectGetMinX(self.topRocket.frame) && CGRectGetMinX(self.ball.frame) <= CGRectGetMaxX(self.topRocket.frame)))
    {
        self.ballDy = fabs(self.ballDy);
    }
    
    if (CGRectGetMaxY(self.ball.frame) >= CGRectGetMinY(self.bottomRocket.frame) && (CGRectGetMaxX(self.ball.frame) >= CGRectGetMinX(self.bottomRocket.frame) && CGRectGetMinX(self.ball.frame) <= CGRectGetMaxX(self.bottomRocket.frame)))
    {
        self.ballDy = -fabs(self.ballDy);
    }
}

- (void)configureUI
{
    //configure UI
    self.navigationItem.title = @"Ping Pong Game";
    self.view.backgroundColor = [UIColor whiteColor];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemEdit target:self action:@selector(didSelectMenuButton)];
    // MARK: - Ball configure
    self.ball = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 50, 50)];
    self.ball.backgroundColor = [UIColor blackColor];
    self.ball.layer.cornerRadius = CGRectGetHeight(self.ball.frame) / 2;
    [self.view addSubview:self.ball];
    
    // MARK: - TopRocket configure
    self.topRocket = [[UIView alloc] initWithFrame: CGRectZero];
    self.topRocket.backgroundColor = [UIColor blackColor];
    self.topRocket.layer.cornerRadius = CGRectGetHeight(self.topRocket.frame) / 2;
    [self.view addSubview:self.topRocket];
    
    // MARK: - BottomRocket configure
    self.bottomRocket = [[UIView alloc] initWithFrame:CGRectZero];
    self.bottomRocket.backgroundColor = [UIColor blackColor];
    self.bottomRocket.layer.cornerRadius = CGRectGetHeight(self.bottomRocket.frame) / 2;
    [self.view addSubview:self.bottomRocket];
    
    // MARK: - ConfigureGameMenu
    self.gameMenuView = [[UIView alloc] initWithFrame:self.view.frame];
    UIBlurEffect *blur = [UIBlurEffect effectWithStyle:UIBlurEffectStyleProminent];
    UIVisualEffectView *blurView = [[UIVisualEffectView alloc] initWithEffect:blur];
    blurView.frame = self.gameMenuView.bounds;
    [self.gameMenuView addSubview:blurView];
    
    
    // MARK: - configure menuOverlay
    
    self.menuOverlay = [[UIView alloc] initWithFrame:self.gameMenuView.bounds];
    [self.gameMenuView addSubview: self.menuOverlay];
    
    UIButton *startGameButton = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, CGRectGetWidth(self.view.frame), buttonsHeight)];
    [startGameButton setTitle:[@"начать игру" uppercaseString] forState:UIControlStateNormal];
    startGameButton.titleLabel.font = [UIFont systemFontOfSize:20 weight:UIFontWeightBold];
    [startGameButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [startGameButton setTitleColor:[UIColor grayColor] forState:UIControlStateHighlighted];
    
    startGameButton.center = CGPointMake(self.menuOverlay.center.x, self.menuOverlay.center.y - 30);
    [startGameButton addTarget:self action:@selector(didSelectStartGameButton) forControlEvents:UIControlEventTouchUpInside];
    [self.menuOverlay addSubview:startGameButton];
    
    UIButton *settingsButton = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, CGRectGetWidth(self.view.frame), buttonsHeight)];
    [settingsButton setTitle:[@"Настройки" uppercaseString] forState:UIControlStateNormal];
    settingsButton.titleLabel.font = [UIFont systemFontOfSize:20 weight:UIFontWeightBold];
    [settingsButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [settingsButton setTitleColor:[UIColor grayColor] forState:UIControlStateHighlighted];
    
    settingsButton.center = CGPointMake(self.menuOverlay.center.x, self.menuOverlay.center.y + 30);
    [settingsButton addTarget:self action:@selector(didSelectSettingsButton) forControlEvents:UIControlEventTouchUpInside];
    [self.menuOverlay addSubview:settingsButton];
    self.menuOverlay.alpha = 0;
    [self.menuOverlay setHidden:YES];
    
    // MARK: - configure settingsOverlay
    
    self.settingsOverlay = [[UIView alloc] initWithFrame:self.gameMenuView.bounds];
    [self.gameMenuView addSubview: self.settingsOverlay];
    
    UILabel *speedLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width / 2, 30)];
    speedLabel.text = @"Скорость игры";
    speedLabel.textAlignment = NSTextAlignmentCenter;
    speedLabel.center = CGPointMake(self.settingsOverlay.center.x, self.settingsOverlay.center.y - 80);
    [self.settingsOverlay addSubview:speedLabel];
    
    UISlider *speedSlider = [[UISlider alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width / 2, 30)];
    speedSlider.value = 0.5;
    speedSlider.center = CGPointMake(self.settingsOverlay.center.x, self.settingsOverlay.center.y - 50);
    [speedSlider addTarget:self action:@selector(speedSliderValueChanged:) forControlEvents:UIControlEventValueChanged];
    [self.settingsOverlay addSubview:speedSlider];
    
    UIStackView *stackView1 = [[UIStackView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width / 1.3, 30)];
    stackView1.axis = UILayoutConstraintAxisHorizontal;
    stackView1.distribution = UIStackViewDistributionFillProportionally;
    UILabel *topPlayerCompLabel = [UILabel new];
    topPlayerCompLabel.text = @"Верхний игрок - комп";
    [stackView1 addArrangedSubview:topPlayerCompLabel];
    UISwitch *topPlayerCompSwitch = [UISwitch new];
    [topPlayerCompSwitch setOn:YES];
    [topPlayerCompSwitch addTarget:self action:@selector(topSwitchValueChanged:) forControlEvents:UIControlEventValueChanged];
    [stackView1 addArrangedSubview:topPlayerCompSwitch];
    stackView1.center = CGPointMake(self.settingsOverlay.center.x, self.settingsOverlay.center.y);
    [self.settingsOverlay addSubview:stackView1];
    
    UIStackView *stackView2 = [[UIStackView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width / 1.3, 30)];
    stackView2.axis = UILayoutConstraintAxisHorizontal;
    stackView2.distribution = UIStackViewDistributionFillProportionally;
    UILabel *bottomPlayerCompLabel = [UILabel new];
    bottomPlayerCompLabel.text = @"Нижний игрок - комп";
    [stackView2 addArrangedSubview:bottomPlayerCompLabel];
    UISwitch *bottomPlayerCompSwitch = [UISwitch new];
    [bottomPlayerCompSwitch setOn:NO];
    [bottomPlayerCompSwitch addTarget:self action:@selector(bottomSwitchValueChanged:) forControlEvents:UIControlEventValueChanged];
    [stackView2 addArrangedSubview:bottomPlayerCompSwitch];
    stackView2.center = CGPointMake(self.settingsOverlay.center.x, self.settingsOverlay.center.y + 40);
    [self.settingsOverlay addSubview:stackView2];
    
    UIButton *settingsDoneButton = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, CGRectGetWidth(self.view.frame), buttonsHeight)];
    [settingsDoneButton setTitle:[@"Готово" uppercaseString] forState:UIControlStateNormal];
    settingsDoneButton.titleLabel.font = [UIFont systemFontOfSize:20 weight:UIFontWeightBold];
    [settingsDoneButton setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [settingsDoneButton setTitleColor:[UIColor grayColor] forState:UIControlStateHighlighted];
    settingsDoneButton.center = CGPointMake(self.settingsOverlay.center.x, self.settingsOverlay.center.y + 100);
    [settingsDoneButton addTarget:self action:@selector(didSelectMenuButton) forControlEvents:UIControlEventTouchUpInside];
    [self.settingsOverlay addSubview:settingsDoneButton];
    self.settingsOverlay.alpha = 0;
    [self.settingsOverlay setHidden:YES];
    
    [self.view addSubview:self.gameMenuView];
    self.gameMenuView.alpha = 0;
    [self.gameMenuView setHidden:YES];
    
    // MARK: - InitialState
    self.isTopComputer = YES;
    self.ballDx = 1;
    self.ballDy = 1;
    self.timerInterval = 0.005;
}

@end
